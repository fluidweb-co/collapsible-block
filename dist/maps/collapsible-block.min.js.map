{"version":3,"file":"../collapsible-block.min.js","sources":["collapsible-block.js"],"sourcesContent":["/**\n * File slider.js.\n *\n * Implement interactive mobile and desktop slider\n */\n\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t  define([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t  module.exports = factory(root);\n\t} else {\n\t  root.CollapsibleBlock = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar _hasInitialized = false;\n\tvar _publicMethods = {\n\t\tmanagers: [],\n\t\tstates: {\n\t\t\tCOLLAPSED: 'collapsed',\n\t\t\tFIRST_EXPANDED: 'first-expanded',\n\t\t\tEXPANDED: 'expanded',\n\t\t},\n\t};\n\tvar _settings = { };\n\tvar _defaults = {\n\t\tbodyClass: 'has-collapsible-block',\n\n\t\telementSelector: '[data-collapsible]',\n\t\tcontentElementSelector: '[data-collapsible-content]',\n\t\tcontentInnerSelector: '.collapsible-content__inner',\n\t\thandlerSelector: '[data-collapsible-handler]',\n\t\t\n\t\tisCollapsedClass: 'is-collapsed',\n\t\tisActivatedClass: 'is-activated',\n\t\tcssTransition: 'height .15s linear',\n\t\t\n\t\ttargetAttribute: 'data-collapsible-target',\n\t\tmaxHeightAttribute: 'data-collapsible-max-height',\n\t\tcreateHandlerAttribute: 'data-collapsible-create-handler',\n\t\tchangeStateOnResizeAttribute: 'data-collapsible-change-state-resize',\n\n\t\tinitialState: _publicMethods.states.FIRST_EXPANDED,\n\t\tinitialStateAttribute: 'data-collapsible-initial-state',\n\t\tfirstExpandedDelay: 100,\n\t\t\n\t\tidPrefix: 'collapsible',\n\t\tcreateHandler: false,\n\t\tmaxHeight: 0,\n\t\thandlerTemplate: '<a href=\"#collapsible\" role=\"button\" data-collapsible-handler>Read more</a>',\n\t\tcontentInnerTemplate: '<div class=\"collapsible-content__inner\"></div>',\n\t};\n\n\n\n\t/*!\n\t* Merge two or more objects together.\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n\t* @param   {Object}   objects  The objects to merge together\n\t* @returns {Object}            Merged values of defaults and options\n\t*/\n\tvar extend = function () {\n\t\t// Variables\n\t\tvar extended = {};\n\t\tvar deep = false;\n\t\tvar i = 0;\n\n\t\t// Check if a deep merge\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n\t\t\tdeep = arguments[0];\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge the object into the extended object\n\t\tvar merge = function (obj) {\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\t\t// If property is an object, merge properties\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textended[prop] = obj[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop through each object and conduct a merge\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar obj = arguments[i];\n\t\t\tmerge(obj);\n\t\t}\n\n\t\treturn extended;\n\t};\n\n\n\n\t/**\n\t * Provide a crossbrowser way to determine which\n\t * transitionend event is supported by the current browser.\n\t * \n\t * Based on the work of:\n\t * Jonathan Suh - https://jonsuh.com/blog/detect-the-end-of-css-animations-and-transitions-with-javascript/\n\t * David Walsh - https://davidwalsh.name/css-animation-callback\n\t *\n\t * @return  {String}  The transitionend event name\n\t */\n\tvar getTransitionEndEvent = function() {\n\t\tvar t;\n\t\tvar el = document.createElement('fakeelement');\n\t\tvar transitions = {\n\t\t\t'transition':'transitionend',\n\t\t\t'OTransition':'oTransitionEnd',\n\t\t\t'MozTransition':'transitionend',\n\t\t\t'WebkitTransition':'webkitTransitionEnd'\n\t\t}\n\n\t\tfor( t in transitions ){\n\t\t\tif( el.style[t] !== undefined ){\n\t\t\t\treturn transitions[t];\n\t\t\t}\n\t\t}\n\n\t\treturn 'transitionend';\n\t};\n\n\n\n\t/**\n\t * Route click events\n\t */\n\tvar handleClick = function( e ) {\n\t\tif ( e.target.closest( _settings.handlerSelector ) ) {\n\t\t\te.preventDefault();\n\t\t\t\n\t\t\t// Get target and handler elements\n\t\t\tvar handlerElement = e.target.closest( _settings.handlerSelector );\n\t\t\tvar targetElement = document.querySelector( '#' + handlerElement.getAttribute( _settings.targetAttribute ) );\n\t\t\t\n\t\t\tif ( ! targetElement ) {\n\t\t\t\ttargetElement = handlerElement;\n\t\t\t}\n\n\t\t\t// Get the collapsbile element\n\t\t\tvar element = targetElement.closest( _settings.elementSelector );\n\n\t\t\t// Maybe toggle collapsbile element state\n\t\t\tif ( element ) {\n\t\t\t\t_publicMethods.toggleState( element );\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Create handler element\n\t */\n\tvar createHandlerElement = function( manager ) {\n\t\tvar element = manager.element;\n\t\tvar contentElement = manager.contentElement;\n\t\tvar handler = document.createElement('div');\n\t\thandler.innerHTML = manager.settings.handlerTemplate.trim();\n\t\tmanager.handlerElement = handler.childNodes[0];\n\t\tmanager.handlerElement.setAttribute( manager.settings.targetAttribute, contentElement.id );\n\t\t\n\t\t// TODO: Fix button role and behavior should be set with JS instead of using the `href` attribute\n\t\tmanager.handlerElement.setAttribute( 'href', '#' );\n\t\tmanager.handlerElement.setAttribute( 'role', 'button' );\n\n\t\telement.insertBefore( handler.childNodes[0], contentElement.nextSibling );\n\t}\n\n\n\n\t/**\n\t * Create content inner element\n\t */\n\tvar maybeCreateContentInnerElement = function( manager ) {\n\t\t// Bail if content inner element already exists\n\t\tif ( manager.contentElement.querySelector( manager.settings.contentInnerSelector ) ) { return; }\n\t\t\n\t\tvar contentElement = manager.contentElement;\n\t\tvar newContentPlaceholder = document.createElement('div');\n\t\tnewContentPlaceholder.innerHTML = manager.settings.contentInnerTemplate.trim();\n\t\tvar contentInner = newContentPlaceholder.childNodes[0];\n\n\t\t// Move content to new content inner element\n\t\tcontentInner.innerHTML = contentElement.innerHTML;\n\t\tcontentElement.innerHTML = newContentPlaceholder.innerHTML;\n\t}\n\n\n\n\t/**\n\t * Get the element's computed `height` even when hidden or collapsed.\n\t *\n\t * @param   HTMLElement  element  Element to get the computed height value.\n\t *\n\t * @return  Number                The computed height value of the element.\n\t */\n\tvar getComputedHeight = function( element ) {\n\t\t// Get original element style values\n\t\tvar originalPosition = element.style.position;\n\t\tvar originalDisplay = element.style.display;\n\t\tvar originalVisibility = element.style.visibility;\n\t\tvar originalTransition = element.style.transition;\n\t\tvar originalHeight = element.style.height;\n\n\t\t// Set element styles prior to getting its height\n\t\telement.style.position = 'absolute';\n\t\telement.style.display = 'block';\n\t\telement.style.visibility = 'hidden';\n\t\telement.style.transition = 'none';\n\t\telement.style.height = '';\n\n\t\t// Get the element's natural height\n\t\tvar computedHeight = element.scrollHeight;\n\n\t\t// Set element styles back to original values\n\t\telement.style.position = originalPosition;\n\t\telement.style.display = originalDisplay;\n\t\telement.style.visibility = originalVisibility;\n\t\telement.style.transition = originalTransition;\n\t\telement.style.height = originalHeight;\n\n\t\treturn computedHeight;\n\t}\n\n\n\n\t/**\n\t * Get the element's current used `height` space, even in the middle of a transition.\n\t *\n\t * @param   HTMLElement  element  Element to get the current height value.\n\t *\n\t * @return  Number                The current height value of the element.\n\t */\n\tvar getCurrentHeight = function( element ) {\n\t\treturn element.getBoundingClientRect().height;\n\t}\n\n\n\n\t/**\n\t * Set the height of the content element.\n\t *\n\t * @param   HTMLElement  element         Collapsible block content element.\n\t * @param   Number       size            New height value for the content element in pixels. The string `px` will be added to the value before setting it to the element's style property.\n\t * @param   Boolean      withTransition  Whether to use transitions between states.\n\t */\n\tvar setHeight = function( element, size, withTransition ) {\n\t\t// Set default value for withTransition\n\t\twithTransition = withTransition === false ? false : true;\n\t\t\n\t\t// Remove element's transition\n\t\tvar originalTransition;\n\t\tif ( ! withTransition ) {\n\t\t\toriginalTransition = element.style.transition;\n\t\t\telement.style.transition = 'none';\n\t\t}\n\t\t\n\t\t// Set the element's new height\n\t\telement.style.height = size + 'px';\n\t\t\n\t\t// Restore element's transition\n\t\tif ( ! withTransition ) {\n\t\t\t// Trigger a reflow, flushing the CSS changes\n\t\t\telement.offsetHeight;\n\t\t\t\n\t\t\t// Set element styles back to original values\n\t\t\telement.style.transition = originalTransition;\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Resize element\n\t */\n\tvar maybeChangeStateOnResize = function( manager ) {\n\t\t// TODO: REFACTOR THIS FUNCTION TO BE MORE EFFICIENT\n\t\t// Reset collapsed state\n\t\t_publicMethods.expand( manager.element );\n\n\t\trequestAnimationFrame( function() {\n\t\t\t// Maybe collapse\n\t\t\tif ( getComputedHeight( manager.contentElement ) > manager.settings.maxHeight ) {\n\t\t\t\t_publicMethods.collapse( manager.element );\n\t\t\t}\n\t\t} );\n\t}\n\n\n\n\t/**\n\t * Remove changed property values from the target element when the `height` transition ends.\n\t *\n\t * @param   mixed  element  The content element of the collapsible block (HTMLElement), or an Event dispatched on that element.\n\t */\n\tvar finishExpand = function ( element ) {\n\t\t// Bail if element is invalid\n\t\tif ( ! element ) { return; }\n\n\t\t// Maybe bail when handling a transition event but not for the right property\n\t\tif ( 'propertyName' in element && element.propertyName !== 'height' ) return;\n\n\t\t// Get target element from property, usually passed in an event object\n\t\tif ( 'target' in element ) {\n\t\t\telement = element.target;\n\t\t}\n\n\t\t// Remove content element properties when transition is complete\n\t\telement.style.height = '';\n\t\telement.style.overflow = '';\n\n\t\t// Remove the event handler so it runs only once\n\t\telement.removeEventListener( getTransitionEndEvent(), finishExpand );\n\t}\n\n\n\t/**\n\t * Remove changed property values from the target element when the `height` transition ends.\n\t *\n\t * @param   mixed  element  The content element of the collapsible block as a HTMLElement, or an Event dispatched on that element.\n\t */\n\tvar finishCollapse = function ( element ) {\n\t\t// Bail if element is invalid\n\t\tif ( ! element ) { return; }\n\n\t\t// Maybe bail when handling a transition event but not for the right property\n\t\tif ( 'propertyName' in element && element.propertyName !== 'height' ) return;\n\n\t\t// Get target element from property, usually passed in an event object\n\t\tif ( 'target' in element ) {\n\t\t\telement = element.target;\n\t\t}\n\n\t\t// Hide the element from the screen and from the accessibility tree\n\t\telement.style.display = 'none';\n\t\telement.style.backgroundColor = 'red';\n\n\t\t// Remove the event handler so it runs only once\n\t\telement.removeEventListener( getTransitionEndEvent(), finishCollapse );\n\t}\n\n\n\n\t/**\n\t * Get slider manager instance from slider element.\n\t *\n\t * @param   HTMLElement  element  Collapsible block main element.\n\t *\n\t * @return  Object                Collapsible block `manager` instance.\n\t */\n\t_publicMethods.getInstance = function ( element ) {\n\t\tvar instance;\n\t\t\n\t\tfor ( var i = 0; i < _publicMethods.managers.length; i++ ) {\n\t\t\tvar manager = _publicMethods.managers[i];\n\t\t\tif ( manager.element == element ) { instance = manager; break; }\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\n\n\t/**\n\t * Collapse element.\n\t *\n\t * @param   HTMLElement  element         Collapsible block main element.\n\t * @param   Boolean      withTransition  Whether to use transitions between states.\n\t */\n\t_publicMethods.collapse = function( element, withTransition ) {\n\t\tvar manager = _publicMethods.getInstance( element );\n\t\t\n\t\t// Bail if manager not found\n\t\t// TODO: Maybe try to initialize collapsible and manager on the fly\n\t\tif ( ! manager ) { return; }\n\n\t\t// Set default value for withTransition\n\t\twithTransition = withTransition === false ? false : true;\n\n\t\t// Collapse element\n\t\tmanager.element.classList.add( manager.settings.isCollapsedClass );\n\t\t\n\t\t// Remove `finishExpand` event listener to prevent block from expanding at the end of the transition\n\t\tmanager.contentElement.removeEventListener( getTransitionEndEvent(), finishExpand );\n\t\t\n\t\t// Set content element to hide overflowing content\n\t\tmanager.contentElement.style.overflow = 'hidden';\n\n\t\t// Set height of the element to the current height value\n\t\t// Without knowing the value of `height` property the browser can't calculate the steps of the `height` values\n\t\t// related to the transition time and therefore won't be able to display the transition.\n\t\tsetHeight( manager.contentElement, getCurrentHeight( manager.contentElement ), false );\n\t\t\n\t\t// Set event listener to finish the \"collapse\" state change\n\t\tif ( withTransition ) {\n\t\t\tmanager.contentElement.addEventListener( getTransitionEndEvent(), finishCollapse );\n\t\t}\n\n\t\t// Trigger a reflow, flushing the CSS changes\n\t\telement.offsetHeight;\n\n\t\t// Set height of the element to the `collapsed` state\n\t\tsetHeight( manager.contentElement, manager.settings.maxHeight, withTransition );\n\n\t\t// Make sure to finish the \"collapse\" state change when transitions are not used\n\t\tif ( ! withTransition ) {\n\t\t\tfinishCollapse( manager.contentElement );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Expand element.\n\t *\n\t * @param   HTMLElement  element         Collapsible block main element.\n\t * @param   Boolean      withTransition  Whether to use transitions between states.\n\t */\n\t_publicMethods.expand = function( element, withTransition ) {\n\t\t// Get element manager\n\t\tvar manager = _publicMethods.getInstance( element );\n\n\t\t// Bail if manager not found\n\t\t// TODO: Maybe try to initialize collapsible and manager on the fly\n\t\tif ( ! manager ) { return; }\n\n\t\t// Set default value for withTransition\n\t\twithTransition = withTransition === false ? false : true;\n\n\t\t// Show the element again on the screen and add it back to the accessibility tree\n\t\tmanager.contentElement.style.display = '';\n\t\t\n\t\t// Remove `finishCollapse` event listener to prevent block from collapsing at the end of the transition\n\t\tmanager.contentElement.removeEventListener( getTransitionEndEvent(), finishCollapse );\n\n\t\t// Set height of the element to the current height value\n\t\tsetHeight( manager.contentElement, getCurrentHeight( manager.contentElement ), false );\n\n\t\t// Set event listener to finish the \"expand\" state change\n\t\tif ( withTransition ) {\n\t\t\tmanager.contentElement.addEventListener( getTransitionEndEvent(), finishExpand );\n\t\t}\n\t\t\n\t\t// Expand element to its content height\n\t\trequestAnimationFrame( function() {\n\t\t\tvar computedHeight = getComputedHeight( manager.contentElement );\n\n\t\t\t// Trigger a reflow, flushing the CSS changes\n\t\t\telement.offsetHeight;\n\n\t\t\t// Set height of the element to the `expanded` state\n\t\t\tsetHeight( manager.contentElement, computedHeight, withTransition );\n\n\t\t\t// Update element's state to `expanded`\n\t\t\tmanager.element.classList.remove( manager.settings.isCollapsedClass );\n\t\t\t\n\t\t\t// Make sure to finish the \"expand\" state change when transitions are not used\n\t\t\tif ( ! withTransition ) {\n\t\t\t\tfinishExpand( manager.contentElement );\n\t\t\t}\n\t\t} );\n\t}\n\n\n\n\t/**\n\t * Toggle between collapsed/expanded states of the element.\n\t *\n\t * @param   HTMLElement  element         Collapsible block main element.\n\t * @param   Boolean      withTransition  Whether to use transitions between states.\n\t */\n\t_publicMethods.toggleState = function( element, withTransition ) {\n\t\tvar manager = _publicMethods.getInstance( element );\n\n\t\t// Bail if manager not found\n\t\tif ( ! manager ) { return; }\n\n\t\t// Toggle state\n\t\tif ( element.classList.contains( manager.settings.isCollapsedClass ) ) {\n\t\t\t_publicMethods.expand( element, withTransition );\n\t\t}\n\t\telse {\n\t\t\t_publicMethods.collapse( element, withTransition );\n\t\t}\n\t}\n\t\n\n\n\t/**\n\t * /**\n\t * Get current state of the collapsible block.\n\t *\n\t * @param   HTMLElement  element         Collapsible block main element.\n\t *\n\t * @return  string                       Either `collapsed` or `expanded`. Can be compared to the constants present in `CollapsibleBlock.states`.\n\t */\n\t_publicMethods.getState = function( element ) {\n\t\tvar manager = _publicMethods.getInstance( element );\n\n\t\t// Bail if manager not found\n\t\tif ( ! manager ) { return false; }\n\t\t\n\t\t// Get current state\n\t\tvar currentState = _publicMethods.states.EXPANDED;\n\t\tif ( element.classList.contains( manager.settings.isCollapsedClass ) ) {\n\t\t\tcurrentState = _publicMethods.states.COLLAPSED;\n\t\t}\n\n\t\treturn currentState;\n\t}\n\t\n\n\n\t/**\n\t * Initialize an element.\n\t * \n\t * @param   HTMLElement  element  Collapsible block main element.\n\t */\n\t_publicMethods.initializeElement = function( element ) {\n\t\tvar manager = {};\n\t\t_publicMethods.managers.push( manager );\n\t\tmanager.element = element;\n\t\tmanager.settings = extend( _settings );\n\t\t\n\t\t// Get content element\n\t\tmanager.contentElement = manager.element.matches( _settings.contentElementSelector ) ? manager.element : manager.element.querySelector( manager.settings.contentElementSelector );\n\t\tif ( ! manager.contentElement ) {\n\t\t\tmanager.contentElement = manager.element;\n\t\t}\n\t\t\n\t\t// Maybe create element ID\n\t\tif ( manager.element.id == '' ) {\n\t\t\tmanager.element.id = manager.settings.idPrefix + '_' + _publicMethods.managers.length;\n\t\t}\n\n\t\t// Maybe create contentElement ID\n\t\tif ( manager.contentElement.id == '' ) {\n\t\t\tmanager.contentElement.id = manager.element.id + '__content';\n\t\t}\n\n\t\t// Get maxHeight from attributes\n\t\tvar maxHeightAttribute = manager.contentElement.getAttribute( manager.settings.maxHeightAttribute );\n\t\tmanager.settings.maxHeight = maxHeightAttribute && maxHeightAttribute != '' ? parseInt( maxHeightAttribute ) : manager.settings.maxHeight;\n\n\t\t// Get createHandler from attributes\n\t\tvar createHandler = manager.element.getAttribute( manager.settings.createHandlerAttribute );\n\t\tmanager.settings.createHandler = createHandler == 'true' || createHandler == 'false' ? Boolean( createHandler ) : manager.settings.createHandler;\n\t\tif ( manager.settings.createHandler ) {\n\t\t\tcreateHandlerElement( manager );\n\t\t}\n\n\t\t// Maybe create content inner element\n\t\tmaybeCreateContentInnerElement( manager );\n\t\t\n\t\t// Set initial state at element initialization\n\t\tvar initialStateAttribute = manager.contentElement.getAttribute( manager.settings.initialStateAttribute );\n\t\tvar initialState = initialStateAttribute ? initialStateAttribute : manager.settings.initialState;\n\t\tvar index = Array.prototype.indexOf.call( manager.element.parentNode.children, manager.element );\n\t\tif ( initialState == _publicMethods.states.EXPANDED || ( initialState == _publicMethods.states.FIRST_EXPANDED && index == 0 ) ) {\n\t\t\t_publicMethods.expand( manager.element, false );\n\t\t}\n\t\telse {\n\t\t\t_publicMethods.collapse( manager.element, false );\n\t\t}\n\t\t\n\t\t// Maybe change state on resize\n\t\tvar changeStateOnResizeAttribute = manager.element.getAttribute( manager.settings.changeStateOnResizeAttribute );\n\t\tmanager.settings.changeStateOnResize = changeStateOnResizeAttribute && changeStateOnResizeAttribute != '' ? Boolean( changeStateOnResizeAttribute ) : false;\n\t\tif ( manager.settings.changeStateOnResize ) {\n\t\t\tmaybeChangeStateOnResize( manager );\n\t\t\t\n\t\t\t// TODO: Maybe move event handler to a single listener\n\t\t\twindow.addEventListener( 'resize', function() { maybeChangeStateOnResize( manager ); } );\n\t\t}\n\t\t\n\t\t// Set css transition property\n\t\tvar computedTransition = window.getComputedStyle( manager.contentElement ).transition;\n\t\tvar cssTransition = computedTransition != '' ? computedTransition + ', ' + manager.settings.cssTransition : manager.settings.cssTransition;\n\t\tmanager.contentElement.style.transition = cssTransition;\n\t\t\n\t\t// Set element as activated\n\t\tmanager.isActivated = true;\n\t\tmanager.element.classList.add( manager.settings.isActivatedClass );\n\t}\n\n\t\n\n\t/**\n\t * Initialize.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t// Merge with general settings with options\n\t\t_settings = extend( _defaults, options );\n\n\t\tvar elements = document.querySelectorAll( _settings.elementSelector );\n\t\t\n\t\tfor ( var i = 0; i < elements.length; i++ ) {\n\t\t\t_publicMethods.initializeElement( elements[ i ] );\n\t\t}\n\t\t\n\t\t// Add event listeners\n\t\tdocument.addEventListener( 'click', handleClick );\n\n\t\t// Set body class\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\n\t\t_hasInitialized = true;\n\t};\n\n\n\n\t//\n\t// Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","CollapsibleBlock","global","this","window","getTransitionEndEvent","t","el","document","createElement","transitions","transition","OTransition","MozTransition","WebkitTransition","undefined","style","handleClick","e","target","closest","_settings","handlerSelector","preventDefault","handlerElement","element","querySelector","getAttribute","targetAttribute","elementSelector","_publicMethods","toggleState","getComputedHeight","originalPosition","position","originalDisplay","display","originalVisibility","visibility","originalTransition","originalHeight","height","computedHeight","scrollHeight","getCurrentHeight","getBoundingClientRect","setHeight","size","withTransition","offsetHeight","maybeChangeStateOnResize","manager","expand","requestAnimationFrame","contentElement","settings","maxHeight","collapse","_hasInitialized","managers","states","COLLAPSED","FIRST_EXPANDED","EXPANDED","_defaults","bodyClass","contentElementSelector","contentInnerSelector","isCollapsedClass","isActivatedClass","cssTransition","maxHeightAttribute","createHandlerAttribute","changeStateOnResizeAttribute","initialState","initialStateAttribute","firstExpandedDelay","idPrefix","createHandler","handlerTemplate","contentInnerTemplate","extend","extended","deep","i","Object","prototype","toString","call","arguments","length","obj","prop","hasOwnProperty","merge","finishExpand","propertyName","overflow","removeEventListener","finishCollapse","backgroundColor","getInstance","instance","classList","add","addEventListener","remove","contains","getState","currentState","initializeElement","push","matches","id","parseInt","Boolean","handler","innerHTML","trim","childNodes","setAttribute","insertBefore","nextSibling","newContentPlaceholder","index","Array","indexOf","parentNode","children","changeStateOnResize","computedTransition","getComputedStyle","isActivated","init","options","elements","querySelectorAll","body"],"mappings":"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"}