{"version":3,"file":"../collapsible-block.min.js","sources":["collapsible-block.js"],"sourcesContent":["/**\n * File slider.js.\n *\n * Implement interactive mobile and desktop slider\n */\n\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t  define([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t  module.exports = factory(root);\n\t} else {\n\t  root.CollapsibleBlock = factory(root);\n\t}\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\tvar _hasInitialized = false;\n\tvar _publicMethods = {\n\t\tmanagers: [],\n\t\tstates: {\n\t\t\tCOLLAPSED: 'collapsed',\n\t\t\tFIRST_EXPANDED: 'first-expanded',\n\t\t\tEXPANDED: 'expanded',\n\t\t},\n\t};\n\tvar _settings = { };\n\tvar _defaults = {\n\t\tbodyClass: 'has-collapsible-block',\n\n\t\telementSelector: '[data-collapsible]',\n\t\tcontentElementSelector: '[data-collapsible-content]',\n\t\tcontentInnerSelector: '.collapsible-content__inner',\n\t\thandlerSelector: '[data-collapsible-handler]',\n\t\thandlerMultiTargetSelector: '[data-collapsible-targets]',\n\t\t\n\t\tautoFocusSelector: '[data-autofocus]',\n\t\tfocusableElementsSelector: 'a[href], button:not([disabled]), input:not([disabled]):not([type=\"hidden\"]), textarea:not([disabled]), select:not([disabled]), details, summary, iframe, object, embed, [contenteditable] [tabindex]:not([tabindex=\"-1\"])',\n\n\t\tisCollapsedClass: 'is-collapsed',\n\t\tisExpandedClass: 'is-expanded',\n\t\tisActivatedClass: 'is-activated',\n\t\tcssTransition: 'height .15s linear',\n\t\t\n\t\ttargetAttribute: 'aria-controls',\n\t\tmultiTargetAttribute: 'data-collapsible-targets',\n\t\tmaxHeightAttribute: 'data-collapsible-max-height',\n\t\tcreateHandlerAttribute: 'data-collapsible-create-handler',\n\t\tchangeStateOnResizeAttribute: 'data-collapsible-change-state-resize',\n\n\t\tinitialState: _publicMethods.states.FIRST_EXPANDED,\n\t\tinitialStateAttribute: 'data-collapsible-initial-state',\n\t\t\n\t\tidPrefix: 'collapsible',\n\t\tcreateHandler: false,\n\t\tmaxHeight: 0,\n\t\thandlerTemplate: '<a href=\"#collapsible\" role=\"button\" data-collapsible-handler>Read more</a>',\n\t\tcontentInnerTemplate: '<div class=\"collapsible-content__inner\"></div>',\n\t};\n\tvar _key = {\n\t\tENTER: 'Enter',\n\t\tSPACE: ' ',\n\t}\n\n\n\n\t/*!\n\t* Merge two or more objects together.\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n\t* @param   {Object}   objects  The objects to merge together\n\t* @returns {Object}            Merged values of defaults and options\n\t*/\n\tvar extend = function () {\n\t\t// Variables\n\t\tvar extended = {};\n\t\tvar deep = false;\n\t\tvar i = 0;\n\n\t\t// Check if a deep merge\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n\t\t\tdeep = arguments[0];\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge the object into the extended object\n\t\tvar merge = function (obj) {\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\t\t\t// If property is an object, merge properties\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textended[prop] = obj[prop];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Loop through each object and conduct a merge\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar obj = arguments[i];\n\t\t\tmerge(obj);\n\t\t}\n\n\t\treturn extended;\n\t};\n\n\n\n\t/**\n\t * Provide a crossbrowser way to determine which\n\t * transitionend event is supported by the current browser.\n\t * \n\t * Based on the work of:\n\t * Jonathan Suh - https://jonsuh.com/blog/detect-the-end-of-css-animations-and-transitions-with-javascript/\n\t * David Walsh - https://davidwalsh.name/css-animation-callback\n\t *\n\t * @return  {String}  The transitionend event name\n\t */\n\tvar getTransitionEndEvent = function() {\n\t\tvar t;\n\t\tvar el = document.createElement('fakeelement');\n\t\tvar transitions = {\n\t\t\t'transition':'transitionend',\n\t\t\t'OTransition':'oTransitionEnd',\n\t\t\t'MozTransition':'transitionend',\n\t\t\t'WebkitTransition':'webkitTransitionEnd'\n\t\t}\n\n\t\tfor( t in transitions ){\n\t\t\tif( el.style[t] !== undefined ){\n\t\t\t\treturn transitions[t];\n\t\t\t}\n\t\t}\n\n\t\treturn 'transitionend';\n\t};\n\n\n\n\t/**\n\t * Trigger a reflow, flushing the CSS changes.\n\t * \n\t * @param   HTMLElement  element  Element to get the computed height value.\n\t * \n\t * @see https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n\t */\n\tvar reflow = function( element ) {\n\t\t// Set element as the body when not provided\n\t\tif ( ! element ) {\n\t\t\telement = document.body;\n\t\t}\n\n\t\telement.offsetHeight;\n\t}\n\n\n\n\t/**\n\t * Check if the element is considered visible. Does not consider the CSS property `visibility: hidden;`.\n\t */\n\t var isVisible = function( element ) {\n\t\treturn !!( element.offsetWidth || element.offsetHeight || element.getClientRects().length );\n\t}\n\n\n\n\t/**\n\t * Gets keyboard-focusable elements within a specified element\n\t *\n\t * @param   HTMLElement  element  The element to search within. Defaults to the `document` root element.\n\t *\n\t * @return  NodeList              All focusable elements withing the element passed in.\n\t */\n\t var getFocusableElements = function( element ) {\n\t\t// Set element to `document` root if not passed in\n\t\tif ( ! element ) { element = document; }\n\t\t\n\t\t// Get elements that are keyboard-focusable\n\t\treturn element.querySelectorAll( _settings.focusableElementsSelector );\n\t}\n\n\n\n\t/**\n\t * Handle toggle events for handlers with multiple targets.\n\t *\n\t * @param   HTMLElement  handlerElement  Handler element.\n\t */\n\tvar handleMultipleTargets = function( handlerElement ) {\n\t\t// Bail if handler element is not valid\n\t\tif ( ! handlerElement ) { return; }\n\n\t\t// Get target ids\n\t\tvar multiTargetIds = handlerElement.getAttribute( _settings.multiTargetAttribute );\n\t\tvar targetIds = multiTargetIds.split( ',' );\n\n\t\t// Iterate targetIds\n\t\tfor ( var i = 0; i < targetIds.length; i++) {\n\t\t\tvar targetId = targetIds[i];\n\n\t\t\t// Get target element\n\t\t\tvar targetElement = document.querySelector( '#' + targetId.trim() );\n\t\t\tif ( targetElement ) {\n\t\t\t\t// Get the collapsbile element\n\t\t\t\tvar element = targetElement.closest( _settings.elementSelector );\n\n\t\t\t\t// Maybe toggle collapsbile element state\n\t\t\t\tif ( element ) {\n\t\t\t\t\t_publicMethods.toggleState( element );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Handle toggle events for handlers with single targets.\n\t *\n\t * @param   HTMLElement  handlerElement  Handler element.\n\t */\n\tvar handleSingleTarget = function( handlerElement ) {\n\t\t// Bail if handler element is not valid\n\t\tif ( ! handlerElement ) { return; }\n\n\t\t// Get target element\n\t\tvar targetElement = document.querySelector( '#' + handlerElement.getAttribute( _settings.targetAttribute ) );\n\t\t\n\t\t// Get target element from the handler element\n\t\tif ( ! targetElement ) {\n\t\t\ttargetElement = handlerElement;\n\t\t}\n\n\t\t// Get the collapsbile element\n\t\tvar element = targetElement.closest( _settings.elementSelector );\n\n\t\t// Maybe toggle collapsbile element state\n\t\tif ( element ) {\n\t\t\t_publicMethods.toggleState( element );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Route click events\n\t */\n\tvar handleClick = function( e ) {\n\t\tif ( e.target.closest( _settings.handlerSelector ) && e.target.closest( _settings.handlerMultiTargetSelector ) ) {\n\t\t\te.preventDefault();\n\t\t\tvar handlerElement = e.target.closest( _settings.handlerMultiTargetSelector );\n\t\t\thandleMultipleTargets( handlerElement );\n\t\t}\n\t\telse if ( e.target.closest( _settings.handlerSelector ) ) {\n\t\t\te.preventDefault();\n\t\t\tvar handlerElement = e.target.closest( _settings.handlerSelector );\n\t\t\thandleSingleTarget( handlerElement );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Handle keypress event.\n\t */\n\tvar handleKeyDown = function( e ) {\n\t\t// Should do nothing if the default action has been cancelled\n\t\tif ( e.defaultPrevented ) { return; }\n\n\t\t// ENTER or SPACE on handler element\n\t\tif ( ( e.key == _key.ENTER || e.key == _key.SPACE ) && e.target.closest( _settings.handlerSelector ) ) {\n\t\t\t// Similate click\n\t\t\thandleClick( e );\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Create handler element\n\t */\n\tvar createHandlerElement = function( manager ) {\n\t\tvar element = manager.element;\n\t\tvar contentElement = manager.contentElement;\n\t\tvar handler = document.createElement('div');\n\t\thandler.innerHTML = manager.settings.handlerTemplate.trim();\n\t\tmanager.handlerElement = handler.childNodes[0];\n\t\tmanager.handlerElement.setAttribute( manager.settings.targetAttribute, contentElement.id );\n\n\t\telement.insertBefore( handler.childNodes[0], contentElement.nextSibling );\n\t}\n\n\n\n\t/**\n\t * Create content inner element\n\t */\n\tvar maybeCreateContentInnerElement = function( manager ) {\n\t\t// Bail if content inner element already exists\n\t\tif ( manager.contentElement.querySelector( manager.settings.contentInnerSelector ) ) { return; }\n\t\t\n\t\tvar contentElement = manager.contentElement;\n\t\tvar newContentPlaceholder = document.createElement('div');\n\t\tnewContentPlaceholder.innerHTML = manager.settings.contentInnerTemplate.trim();\n\t\tvar contentInner = newContentPlaceholder.childNodes[0];\n\n\t\t// Move content to new content inner element\n\t\tcontentInner.innerHTML = contentElement.innerHTML;\n\t\tcontentElement.innerHTML = newContentPlaceholder.innerHTML;\n\t}\n\n\n\n\t/**\n\t * Get the element's computed `height` even when hidden or collapsed.\n\t *\n\t * @param   HTMLElement  element  Element to get the computed height value.\n\t *\n\t * @return  Number                The computed height value of the element.\n\t */\n\tvar getComputedHeight = function( element ) {\n\t\t// Get original element style values\n\t\tvar originalPosition = element.style.position;\n\t\tvar originalDisplay = element.style.display;\n\t\tvar originalVisibility = element.style.visibility;\n\t\tvar originalTransition = element.style.transition;\n\t\tvar originalHeight = element.style.height;\n\n\t\t// Set element styles prior to getting its height\n\t\telement.style.position = 'absolute';\n\t\telement.style.display = 'block';\n\t\telement.style.visibility = 'hidden';\n\t\telement.style.transition = 'none';\n\t\telement.style.height = '';\n\n\t\t// Get the element's natural height\n\t\tvar computedHeight = element.scrollHeight;\n\n\t\t// Set element styles back to original values\n\t\telement.style.position = originalPosition;\n\t\telement.style.display = originalDisplay;\n\t\telement.style.visibility = originalVisibility;\n\t\telement.style.transition = originalTransition;\n\t\telement.style.height = originalHeight;\n\n\t\treturn computedHeight;\n\t}\n\n\n\n\t/**\n\t * Get the element's current used `height` space, even in the middle of a transition.\n\t *\n\t * @param   HTMLElement  element  Element to get the current height value.\n\t *\n\t * @return  Number                The current height value of the element.\n\t */\n\tvar getCurrentHeight = function( element ) {\n\t\treturn element.getBoundingClientRect().height;\n\t}\n\n\n\n\t/**\n\t * Set the height of the content element.\n\t *\n\t * @param   HTMLElement  element         Collapsible block content element.\n\t * @param   Number       size            New height value for the content element in pixels. The string `px` will be added to the value before setting it to the element's style property.\n\t * @param   Boolean      withTransition  Whether to use transitions between states.\n\t */\n\tvar setHeight = function( element, size, withTransition ) {\n\t\t// Set default value for withTransition\n\t\twithTransition = withTransition === false ? false : true;\n\t\t\n\t\t// Remove element's transition\n\t\tvar originalTransition;\n\t\tif ( ! withTransition ) {\n\t\t\toriginalTransition = element.style.transition;\n\t\t\telement.style.transition = 'none';\n\t\t}\n\t\t\n\t\t// Set the element's new height\n\t\telement.style.height = size + 'px';\n\t\t\n\t\t// Restore element's transition\n\t\tif ( ! withTransition ) {\n\t\t\t// Trigger a reflow, flushing the CSS changes\n\t\t\treflow( element );\n\t\t\t\n\t\t\t// Set element styles back to original values\n\t\t\telement.style.transition = originalTransition;\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Resize element\n\t */\n\tvar maybeChangeStateOnResize = function( manager ) {\n\t\t// TODO: REFACTOR THIS FUNCTION TO BE MORE EFFICIENT\n\t\t// Reset collapsed state\n\t\t_publicMethods.expand( manager.element );\n\n\t\trequestAnimationFrame( function() {\n\t\t\t// Maybe collapse\n\t\t\tif ( getComputedHeight( manager.contentElement ) > manager.settings.maxHeight ) {\n\t\t\t\t_publicMethods.collapse( manager.element );\n\t\t\t}\n\t\t} );\n\t}\n\n\n\n\t/**\n\t * Syncronize `aria-expanded` attribute for every handler of the collapsible-block on the page\n\t *\n\t * @param   mixed  HTMLElement  The content element of the collapsible block\n\t */\n\tvar syncAriaExpanded = function ( element, expanded ) {\n\t\t// Bail if `element` or `expanded` are invalid\n\t\tif ( ! element && typeof expanded !== 'boolean' ) { return; }\n\n\t\tvar handlers = document.querySelectorAll( '[' + _settings.targetAttribute + '=' + element.id + ']' );\n\t\tfor ( var i = 0; i < handlers.length; i++ ) {\n\t\t\tvar handler = handlers[ i ];\n\t\t\thandler.setAttribute( 'aria-expanded', expanded );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Finish the change to the \"expanded\" state.\n\t *\n\t * @param   mixed  element  The content element of the collapsible block as a HTMLElement, or an Event dispatched on that element.\n\t */\n\tvar finishExpand = function ( element ) {\n\t\t// Bail if element is invalid\n\t\tif ( ! element ) { return; }\n\n\t\t// Maybe bail when handling a transition event but not for the right property\n\t\tif ( 'propertyName' in element && element.propertyName !== 'height' ) return;\n\n\t\t// Get target element from property, usually passed in an event object\n\t\tif ( 'target' in element && element.target ) {\n\t\t\telement = element.target;\n\t\t}\n\n\t\t// Remove content element properties when transition is complete\n\t\telement.style.height = '';\n\t\telement.style.overflow = '';\n\n\t\t// Syncronize `aria-expanded` for every handler on the page\n\t\tsyncAriaExpanded( element, true );\n\n\t\tif ( _hasInitialized ) {\n\t\t\tvar focusElement = null;\n\n\t\t\t// Maybe set focus to the child element marked as auto-focus that is visible, skipping those in nested collapsible blocks\n\t\t\tvar autofocusChildren = element.querySelectorAll( _settings.autoFocusSelector );\n\t\t\tif ( ! focusElement && autofocusChildren ) {\n\t\t\t\tfor ( var i = 0; i < autofocusChildren.length; i++ ) {\n\t\t\t\t\tvar autofocusChild = autofocusChildren[i];\n\t\t\t\t\t\n\t\t\t\t\tif ( autofocusChild.closest( _settings.contentElementSelector ) === element && isVisible( autofocusChild ) ) {\n\t\t\t\t\t\tfocusElement = autofocusChild;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Maybe set focusElement to the first focusable element that is visible\n\t\t\tif ( ! focusElement && element.matches( _settings.autoFocusSelector ) ) {\n\t\t\t\tvar focusableElements = Array.from( getFocusableElements( element ) );\n\n\t\t\t\tfor ( var i = 0; i < focusableElements.length; i++ ) {\n\t\t\t\t\tvar focusableElement = focusableElements[i];\n\t\t\t\t\tif ( isVisible( focusableElement ) ) {\n\t\t\t\t\t\tfocusElement = focusableElement;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set focus to focusElement\n\t\t\tif ( focusElement ) {\n\t\t\t\tfocusElement.focus();\n\t\t\t}\n\t\t}\n\n\t\t// Remove the event handler so it runs only once\n\t\telement.removeEventListener( getTransitionEndEvent(), finishExpand );\n\t}\n\n\n\t/**\n\t * Finish the change to the \"collapsed\" state.\n\t *\n\t * @param   mixed  element  The content element of the collapsible block as a HTMLElement, or an Event dispatched on that element.\n\t */\n\tvar finishCollapse = function ( element ) {\n\t\t// Bail if element is invalid\n\t\tif ( ! element ) { return; }\n\n\t\t// Maybe bail when handling a transition event but not for the right property\n\t\tif ( 'propertyName' in element && element.propertyName !== 'height' ) return;\n\n\t\t// Get target element from property, usually passed in an event object\n\t\tif ( 'target' in element && element.target ) {\n\t\t\telement = element.target;\n\t\t}\n\n\t\t// Hide the element from the screen and from the accessibility tree\n\t\telement.style.display = 'none';\n\n\t\t// Syncronize `aria-expanded` for every handler on the page\n\t\tsyncAriaExpanded( element, false );\n\n\t\t// Remove the event handler so it runs only once\n\t\telement.removeEventListener( getTransitionEndEvent(), finishCollapse );\n\t}\n\n\n\n\t/**\n\t * Get slider manager instance from slider element.\n\t *\n\t * @param   HTMLElement  element  Collapsible block main element.\n\t *\n\t * @return  Object                Collapsible block `manager` instance.\n\t */\n\t_publicMethods.getInstance = function ( element ) {\n\t\tvar instance;\n\t\t\n\t\tfor ( var i = 0; i < _publicMethods.managers.length; i++ ) {\n\t\t\tvar manager = _publicMethods.managers[i];\n\t\t\tif ( manager.element == element ) { instance = manager; break; }\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\n\n\t/**\n\t * Collapse element.\n\t *\n\t * @param   HTMLElement  element         Collapsible block main element.\n\t * @param   Boolean      withTransition  Whether to use transitions between states.\n\t */\n\t_publicMethods.collapse = function( element, withTransition ) {\n\t\tvar manager = _publicMethods.getInstance( element );\n\t\t\n\t\t// Bail if manager not found\n\t\t// TODO: Maybe try to initialize collapsible and manager on the fly\n\t\tif ( ! manager ) { return; }\n\n\t\t// Set default value for withTransition\n\t\twithTransition = withTransition === false ? false : true;\n\n\t\t// Update element's state to `collapsed`\n\t\tmanager.element.classList.add( manager.settings.isCollapsedClass );\n\t\tmanager.element.classList.remove( manager.settings.isExpandedClass );\n\t\t\n\t\t// Remove `finishExpand` event listener to prevent block from expanding at the end of the transition\n\t\tmanager.contentElement.removeEventListener( getTransitionEndEvent(), finishExpand );\n\t\t\n\t\t// Set content element to hide overflowing content\n\t\tmanager.contentElement.style.overflow = 'hidden';\n\n\t\t// Set height of the element to the current height value\n\t\t// Without knowing the value of `height` property the browser can't calculate the steps of the `height` values\n\t\t// related to the transition time and therefore won't be able to display the transition.\n\t\tsetHeight( manager.contentElement, getCurrentHeight( manager.contentElement ), false );\n\t\t\n\t\t// Set event listener to finish the \"collapse\" state change\n\t\tif ( withTransition ) {\n\t\t\tmanager.contentElement.addEventListener( getTransitionEndEvent(), finishCollapse );\n\t\t}\n\n\t\t// Trigger a reflow, flushing the CSS changes\n\t\treflow( element );\n\n\t\t// Set height of the element to the `collapsed` state\n\t\tsetHeight( manager.contentElement, manager.settings.maxHeight, withTransition );\n\n\t\t// Make sure to finish the \"collapse\" state change when transitions are not used\n\t\tif ( ! withTransition ) {\n\t\t\tfinishCollapse( manager.contentElement );\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Expand element.\n\t *\n\t * @param   HTMLElement  element         Collapsible block main element.\n\t * @param   Boolean      withTransition  Whether to use transitions between states.\n\t */\n\t_publicMethods.expand = function( element, withTransition ) {\n\t\t// Get element manager\n\t\tvar manager = _publicMethods.getInstance( element );\n\n\t\t// Bail if manager not found\n\t\t// TODO: Maybe try to initialize collapsible and manager on the fly\n\t\tif ( ! manager ) { return; }\n\n\t\t// Set default value for withTransition\n\t\twithTransition = withTransition === false ? false : true;\n\n\t\t// Show the element again on the screen and add it back to the accessibility tree\n\t\tmanager.contentElement.style.display = '';\n\t\t\n\t\t// Remove `finishCollapse` event listener to prevent block from collapsing at the end of the transition\n\t\tmanager.contentElement.removeEventListener( getTransitionEndEvent(), finishCollapse );\n\n\t\t// Set height of the element to the current height value\n\t\tsetHeight( manager.contentElement, getCurrentHeight( manager.contentElement ), false );\n\n\t\t// Set event listener to finish the \"expand\" state change\n\t\tif ( withTransition ) {\n\t\t\tmanager.contentElement.addEventListener( getTransitionEndEvent(), finishExpand );\n\t\t}\n\t\t\n\t\t// Expand element to its content height\n\t\trequestAnimationFrame( function() {\n\t\t\tvar computedHeight = getComputedHeight( manager.contentElement );\n\n\t\t\t// Trigger a reflow, flushing the CSS changes\n\t\t\treflow( element );\n\n\t\t\t// Set height of the element to the `expanded` state\n\t\t\tsetHeight( manager.contentElement, computedHeight, withTransition );\n\n\t\t\t// Update element's state to `expanded`\n\t\t\tmanager.element.classList.add( manager.settings.isExpandedClass );\n\t\t\tmanager.element.classList.remove( manager.settings.isCollapsedClass );\n\t\t\t\n\t\t\t// Make sure to finish the \"expand\" state change when transitions are not used\n\t\t\tif ( ! withTransition ) {\n\t\t\t\tfinishExpand( manager.contentElement );\n\t\t\t}\n\t\t} );\n\t}\n\n\n\n\t/**\n\t * Toggle between collapsed/expanded states of the element.\n\t *\n\t * @param   HTMLElement  element         Collapsible block main element.\n\t * @param   Boolean      withTransition  Whether to use transitions between states.\n\t */\n\t_publicMethods.toggleState = function( element, withTransition ) {\n\t\tvar manager = _publicMethods.getInstance( element );\n\n\t\t// Bail if manager not found\n\t\tif ( ! manager ) { return; }\n\n\t\t// Toggle state\n\t\tif ( element.classList.contains( manager.settings.isCollapsedClass ) ) {\n\t\t\t_publicMethods.expand( element, withTransition );\n\t\t}\n\t\telse {\n\t\t\t_publicMethods.collapse( element, withTransition );\n\t\t}\n\t}\n\t\n\n\n\t/**\n\t * /**\n\t * Get current state of the collapsible block.\n\t *\n\t * @param   HTMLElement  element         Collapsible block main element.\n\t *\n\t * @return  string                       Either `collapsed` or `expanded`. Can be compared to the constants present in `CollapsibleBlock.states`.\n\t */\n\t_publicMethods.getState = function( element ) {\n\t\tvar manager = _publicMethods.getInstance( element );\n\n\t\t// Bail if manager not found\n\t\tif ( ! manager ) { return false; }\n\t\t\n\t\t// Get current state\n\t\tvar currentState = _publicMethods.states.EXPANDED;\n\t\tif ( element.classList.contains( manager.settings.isCollapsedClass ) ) {\n\t\t\tcurrentState = _publicMethods.states.COLLAPSED;\n\t\t}\n\n\t\treturn currentState;\n\t}\n\n\n\n\t/**\n\t * Initialize a handler element.\n\t */\n\t_publicMethods.initializeHandler = function( handler ) {\n\t\t// Enable the handler element\n\t\thandler.removeAttribute( 'disabled' );\n\t\thandler.removeAttribute( 'aria-hidden' );\n\t\t\n\t\t// Add the element to the natural tab order\n\t\thandler.setAttribute( 'tabindex', '0' );\n\n\t\t// Set handler role to `button`\n\t\tif ( handler.tagName.toUpperCase() != 'BUTTON' ) {\n\t\t\thandler.setAttribute( 'role', 'button' );\n\t\t}\n\n\t\t// Get target attributes\n\t\tvar targetId = handler.getAttribute( _settings.targetAttribute );\n\t\tvar multiTargetIds = handler.getAttribute( _settings.multiTargetAttribute );\n\n\t\t// Maybe get target element id from attributes or parent elements\n\t\tif ( ( ! targetId || targetId == '' ) && ( ! multiTargetIds || multiTargetIds == '' ) ) {\n\t\t\tvar parentCollapsible = handler.closest( _settings.elementSelector );\n\n\t\t\t// Check if collapsbile blocks is also the content element\n\t\t\tif ( parentCollapsible && parentCollapsible.matches( _settings.contentElementSelector ) ) {\n\t\t\t\ttargetId = parentCollapsible.id;\n\t\t\t}\n\t\t\t// Else, try to get content element from the collapsible block\n\t\t\telse if ( parentCollapsible && parentCollapsible.querySelector( _settings.contentElementSelector ) ) {\n\t\t\t\tvar contentElement = parentCollapsible.querySelector( _settings.contentElementSelector );\n\t\t\t\ttargetId = contentElement.id;\n\t\t\t}\n\n\t\t\t// Maybe set target attribute\n\t\t\tif ( targetId && targetId != '' ) {\n\t\t\t\thandler.setAttribute( _settings.targetAttribute, targetId );\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Remove the `href` attribute\n\t\thandler.removeAttribute( 'href' );\n\t}\n\t\n\n\n\t/**\n\t * Initialize an element.\n\t * \n\t * @param   HTMLElement  element  Collapsible block main element.\n\t */\n\t_publicMethods.initializeElement = function( element ) {\n\t\tvar manager = {};\n\t\t_publicMethods.managers.push( manager );\n\t\tmanager.element = element;\n\t\t// TODO: Refactor to remove `manager.settings` as it will always be a copy of the high-level `_settings` variable, with more properties that can be added directly to the `manager` variable.\n\t\tmanager.settings = extend( _settings );\n\t\t\n\t\t// Get content element\n\t\tmanager.contentElement = manager.element.matches( _settings.contentElementSelector ) ? manager.element : manager.element.querySelector( manager.settings.contentElementSelector );\n\t\tif ( ! manager.contentElement ) {\n\t\t\tmanager.contentElement = manager.element;\n\t\t}\n\t\t\n\t\t// Maybe create element ID\n\t\tif ( manager.element.id == '' ) {\n\t\t\tmanager.element.id = manager.settings.idPrefix + '_' + _publicMethods.managers.length;\n\t\t}\n\n\t\t// Maybe create contentElement ID\n\t\tif ( manager.contentElement.id == '' ) {\n\t\t\tmanager.contentElement.id = manager.element.id + '__content';\n\t\t}\n\n\t\t// Get maxHeight from attributes\n\t\tvar maxHeightAttribute = manager.contentElement.getAttribute( manager.settings.maxHeightAttribute );\n\t\tmanager.settings.maxHeight = maxHeightAttribute && maxHeightAttribute != '' ? parseInt( maxHeightAttribute ) : manager.settings.maxHeight;\n\n\t\t// Get createHandler from attributes\n\t\tvar createHandler = manager.element.getAttribute( manager.settings.createHandlerAttribute );\n\t\tmanager.settings.createHandler = createHandler == 'true' || createHandler == 'false' ? Boolean( createHandler ) : manager.settings.createHandler;\n\t\tif ( manager.settings.createHandler ) {\n\t\t\tcreateHandlerElement( manager );\n\t\t}\n\n\t\t// Maybe create content inner element\n\t\tmaybeCreateContentInnerElement( manager );\n\n\t\t// Set initial state at element initialization\n\t\tvar initialStateAttribute = manager.contentElement.getAttribute( manager.settings.initialStateAttribute );\n\t\tvar initialState = initialStateAttribute ? initialStateAttribute : manager.settings.initialState;\n\t\tvar index = Array.prototype.indexOf.call( manager.element.parentNode.children, manager.element );\n\t\tif ( initialState == _publicMethods.states.EXPANDED || ( initialState == _publicMethods.states.FIRST_EXPANDED && index == 0 ) ) {\n\t\t\t_publicMethods.expand( manager.element, false );\n\t\t}\n\t\telse {\n\t\t\t_publicMethods.collapse( manager.element, false );\n\t\t}\n\t\t\n\t\t// Maybe change state on resize\n\t\tvar changeStateOnResizeAttribute = manager.element.getAttribute( manager.settings.changeStateOnResizeAttribute );\n\t\tmanager.settings.changeStateOnResize = changeStateOnResizeAttribute && changeStateOnResizeAttribute != '' ? Boolean( changeStateOnResizeAttribute ) : false;\n\t\tif ( manager.settings.changeStateOnResize ) {\n\t\t\tmaybeChangeStateOnResize( manager );\n\t\t\t\n\t\t\t// TODO: Maybe move event handler to a single listener\n\t\t\twindow.addEventListener( 'resize', function() { maybeChangeStateOnResize( manager ); } );\n\t\t}\n\t\t\n\t\t// Set css transition property\n\t\tvar computedTransition = window.getComputedStyle( manager.contentElement ).transition;\n\t\tvar cssTransition = computedTransition != '' ? computedTransition + ', ' + manager.settings.cssTransition : manager.settings.cssTransition;\n\t\tmanager.contentElement.style.transition = cssTransition;\n\t\t\n\t\t// Set element as activated\n\t\tmanager.isActivated = true;\n\t\tmanager.element.classList.add( manager.settings.isActivatedClass );\n\t}\n\n\t\n\n\t/**\n\t * Initialize.\n\t */\n\t_publicMethods.init = function( options ) {\n\t\tif ( _hasInitialized ) return;\n\n\t\t// Merge with general settings with options\n\t\t_settings = extend( _defaults, options );\n\n\t\t// Initialize collapsible elements\n\t\tvar elements = document.querySelectorAll( _settings.elementSelector );\n\t\tfor ( var i = 0; i < elements.length; i++ ) {\n\t\t\t_publicMethods.initializeElement( elements[ i ] );\n\t\t}\n\n\t\t// Initialize handler elements\n\t\tvar handlers = document.querySelectorAll( _settings.handlerSelector );\n\t\tfor ( var i = 0; i < handlers.length; i++ ) {\n\t\t\t_publicMethods.initializeHandler( handlers[ i ] );\n\t\t}\n\n\t\t// Trigger a reflow, flushing the CSS changes\n\t\treflow();\n\n\t\t// Syncronize `aria-expanded` for every handler on the page\n\t\tfor ( var i = 0; i < elements.length; i++ ) {\n\t\t\tvar element = elements[ i ];\n\t\t\tvar contentElement = element.matches( _settings.contentElementSelector ) ? element : element.querySelector( _settings.contentElementSelector );\n\t\t\tsyncAriaExpanded( contentElement, _publicMethods.getState( element ) == _publicMethods.states.EXPANDED );\n\t\t}\n\t\t\n\t\t// Add event listeners\n\t\tdocument.addEventListener( 'click', handleClick );\n\t\tdocument.addEventListener( 'keydown', handleKeyDown, true );\n\n\t\t// Set body class\n\t\tdocument.body.classList.add( _settings.bodyClass );\n\n\t\t// Set as initialized\n\t\trequestAnimationFrame( function() {\n\t\t\t_hasInitialized = true;\n\t\t} );\n\t};\n\n\n\n\t//\n\t// Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"names":["root","factory","define","amd","exports","module","CollapsibleBlock","global","this","window","getTransitionEndEvent","t","el","document","createElement","transitions","transition","OTransition","MozTransition","WebkitTransition","undefined","style","reflow","element","body","offsetHeight","isVisible","offsetWidth","getClientRects","length","handleClick","e","handlerElement","target","closest","_settings","handlerSelector","handlerMultiTargetSelector","preventDefault","targetIds","getAttribute","multiTargetAttribute","split","i","targetId","targetElement","querySelector","trim","elementSelector","_publicMethods","toggleState","handleMultipleTargets","targetAttribute","handleKeyDown","defaultPrevented","key","_key","getComputedHeight","originalPosition","position","originalDisplay","display","originalVisibility","visibility","originalTransition","originalHeight","height","computedHeight","scrollHeight","getCurrentHeight","getBoundingClientRect","setHeight","size","withTransition","maybeChangeStateOnResize","manager","expand","requestAnimationFrame","contentElement","settings","maxHeight","collapse","syncAriaExpanded","expanded","handlers","querySelectorAll","id","setAttribute","_hasInitialized","managers","states","COLLAPSED","FIRST_EXPANDED","EXPANDED","_defaults","bodyClass","contentElementSelector","contentInnerSelector","autoFocusSelector","focusableElementsSelector","isCollapsedClass","isExpandedClass","isActivatedClass","cssTransition","maxHeightAttribute","createHandlerAttribute","changeStateOnResizeAttribute","initialState","initialStateAttribute","idPrefix","createHandler","handlerTemplate","contentInnerTemplate","extend","extended","deep","Object","prototype","toString","call","arguments","obj","prop","hasOwnProperty","merge","finishExpand","propertyName","overflow","focusElement","autofocusChildren","autofocusChild","matches","focusableElements","Array","from","focusableElement","focus","removeEventListener","finishCollapse","getInstance","instance","classList","add","remove","addEventListener","contains","getState","currentState","initializeHandler","handler","removeAttribute","tagName","toUpperCase","multiTargetIds","parentCollapsible","initializeElement","push","parseInt","Boolean","innerHTML","childNodes","insertBefore","nextSibling","newContentPlaceholder","index","indexOf","parentNode","children","changeStateOnResize","computedTransition","getComputedStyle","isActivated","init","options","elements"],"mappings":"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"}